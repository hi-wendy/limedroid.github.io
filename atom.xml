<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>时光轻缓，微风刚好</title>
  <icon>https://www.gravatar.com/avatar/7bfda21fef8527e60cea153f869a4b80</icon>
  <subtitle>Wendy</subtitle>
  <link href="/limedroid.github.io/atom.xml" rel="self"/>
  
  <link href="https://hi-wendy.github.io/limedroid.github.io/"/>
  <updated>2019-09-18T08:43:04.955Z</updated>
  <id>https://hi-wendy.github.io/limedroid.github.io/</id>
  
  <author>
    <name>Wendy</name>
    <email>807595678@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue-cli初识</title>
    <link href="https://hi-wendy.github.io/limedroid.github.io//posts/cca8efb6/"/>
    <id>https://hi-wendy.github.io/limedroid.github.io//posts/cca8efb6/</id>
    <published>2019-09-18T02:08:07.421Z</published>
    <updated>2019-09-18T08:43:04.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Node 版本要求</p><p>Vue CLI 需要 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> 或 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a> 在同一台电脑中管理多个 Node 版本。</p><p>你需要全局安装vue-cli工具：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><p>使用这个命令查看是否安装成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure><h2 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h2><p>运行以下命令创建一个新项目：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue create 你的项目名</span><br><span class="line"><span class="comment">#英文名（vue-cli规定项目名不能出现大写字母，可使用中划线）</span></span><br></pre></td></tr></table></figure><p>命令执行后会提示选取预设：</p><img src="/limedroid.github.io/posts/cca8efb6/1568774135787.png"><p>推荐选择Manually select features，也就是手动选择预设。（上下箭头调整选中，回车确定选择）</p><img src="/limedroid.github.io/posts/cca8efb6/1568774297288.png"><p>回车后跳出很多选项，选择你项目中需要用到的工具。</p><ul><li><p>Babel：你的项目是否需要做编译转化，如ES6转化为ES5语法以兼容低版本浏览器。</p></li><li><p>TypeScript：是否使用TS编码。</p></li><li><p>Progressive Web App (PWA) Support：是否支持webApp。</p></li><li><p>Router：是否需要路由。一般用来做单页应用需要用到，可做到无刷新页面跳转，交互友好。<a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">官网地址</a></p></li><li><p>Vuex：状态管理库。当你不知道它有什么作用时，说明你还不需要用到它。需要使用的可以进<a href="https://vuex.vuejs.org/zh/guide/" target="_blank" rel="noopener">官网</a>查看使用方法与场景，下面我也会简单介绍下vuex的简单用法。</p></li><li><p>CSS Pre-processors：是否需要使用css预处理器，比如：less,scss,stylus。</p></li><li><p>Linter / Formatter：调整ESLint的提示方式。</p></li><li><p>Unit Testing和E2E Testing：单元测试和E2E测试。很遗憾，楼主还没作深入了解，不作介绍。</p><p>PS：上下箭头移动选中光标，空格调整选中状态。回车进入下一步。</p><p>[^]: 楼主通常选择：Babel,Router,Vuex,CSS Pre-processors,Linter / Formatter。</p><ul><li><p>若勾选Router会进入路由模式选择，请查看<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90" target="_blank" rel="noopener">路由官网路由2种模式</a>的区别再进行选择。</p></li><li><p>若勾选CSS Pre-processors会进入css预处理器选择，选择自己需要的就好了。</p></li><li><p>若勾选Linter / Formatter会进入选择ESLint的提示方式，通常我选择ESLint with error prevention only。其他没作了解。。。</p></li><li><p>Pick additional lint features：Eslint校验的时机。保存就检测和fix和commit时检测</p></li><li><p>Where do you prefer placing config for Babel, PostCSS, ESLint, etc.?：将配置信息保存在哪里。楼主一般是保存在package.json里。</p></li><li><p>Save this as a preset for future projects?：是否将此选择保存到预设（下次可直接选择后不再进行以上配置）</p></li><li><p>最后确定后将进行必要依赖安装，安装即全部完成。</p><img src="/limedroid.github.io/posts/cca8efb6/1568776286076.png"></li></ul></li></ul><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>安装完成后，根据命令窗口提示，将命令窗口切换到项目目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-vue</span><br></pre></td></tr></table></figure><p>启动项目：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn serve</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p>待命令执行完后，不出意外项目就启动好了。</p><p>根据命令窗口提示，在浏览器地址栏输入local的地址，你就可以访问你创建的项目了。就可以开始愉快的玩耍了。</p><img src="/limedroid.github.io/posts/cca8efb6/1568784837710.png"><h2 id="远程仓库关联介绍"><a href="#远程仓库关联介绍" class="headerlink" title="远程仓库关联介绍"></a>远程仓库关联介绍</h2><p>以码云为例（当然不是广告哈，我也希望是广告我还可以收点广告费呢），当然你可以使用其他git远程仓库服务。</p><h3 id="创建新的远程仓库"><a href="#创建新的远程仓库" class="headerlink" title="创建新的远程仓库"></a>创建新的远程仓库</h3><img src="/limedroid.github.io/posts/cca8efb6/1568785197262.png"><img src="/limedroid.github.io/posts/cca8efb6/1568785298388.png"><p>填写必要信息：仓库名称（英文名，最好是和项目名称相同），仓库介绍：我觉得你应该必填，描述项目，不然项目多的你自己都不认得。</p><p><strong>PS：使用Readme文件初始化这个仓库。最好是去掉勾选，保证仓库为空仓库（其他勾选也不要勾了）。不然关联vue-cli项目会产生一些不必要的问题。</strong></p><h3 id="将vue-cli项目和git远程仓库关联"><a href="#将vue-cli项目和git远程仓库关联" class="headerlink" title="将vue-cli项目和git远程仓库关联"></a>将vue-cli项目和git远程仓库关联</h3><p>远程仓库创建完成后会跳转到该项目的代码界面。没有文件的仓库应该是这个样子。</p><img src="/limedroid.github.io/posts/cca8efb6/1568785683096.png"><p>你可以设置自己的git全局设置。</p><p>然后使用已有仓库？下方的命令，当然若你的命令窗口已经在你的项目根目录后就不需要cd了。</p><h2 id="vue-cli目录介绍"><a href="#vue-cli目录介绍" class="headerlink" title="vue-cli目录介绍"></a>vue-cli目录介绍</h2><img src="/limedroid.github.io/posts/cca8efb6/1568786011998.png"><ul><li><p>.git：为git工具文件，请不要手动修改它。</p></li><li><p>node_modules：webpack依赖包。请不要手动修改它。</p></li><li><p>public：里面的静态资源都不会经过webpack处理，当你的js或者css不需要经过webpack进行处理的时候可以直接放在这个文件夹。引用方式在index.html正常引用即可，当然最为安全的做法是类似favicon.ico文件的引用。&lt;%= BASE_URL %&gt;favicon.ico前面添加&lt;%= BASE_URL %&gt;</p></li><li><p>src：源代码目录</p><ul><li>assets：静态资源目录与public目录的区别是webpack会用各种处理器处理你引用过的资源，引用方式也不相同。下面我会接受assets里资源的引用。</li><li>components：公共组件文件夹</li><li>views：页面组件文件夹。你需要把所有的页面都理解成一个组件，所有的页面都是通过各种组件组成一个大的组件。</li><li>App.vue：根组件。</li><li>main.js：入口js</li><li>router.js：路由js</li><li>store.js：vuex相关</li></ul></li><li><p>.gitignore：git忽略配置文件。</p></li><li><p>babel.config.js：babel配置文件。</p></li><li><p>package.json：依赖包列表。以及上方如果你选择将eslint及其他配置保存在这个里面，那你就应该在这个文件里配置相关的一些配置。</p></li><li><p>README.md：介绍文件，可以写一些项目描述啥的，可以和项目脱离。</p></li><li><p>vue.config.js：vue-cli中的webpack配置可以在里面设置。如果没有可自行建立。</p></li><li><p>yarn.lock：自动生成。和package-lock.json作用类似。请不要手动修改它。</p></li></ul><h2 id="开始开发"><a href="#开始开发" class="headerlink" title="开始开发"></a>开始开发</h2><h4 id="main-js入口文件介绍"><a href="#main-js入口文件介绍" class="headerlink" title="main.js入口文件介绍"></a>main.js入口文件介绍</h4><img src="/limedroid.github.io/posts/cca8efb6/1568788893058.png"><p>当然你可以引入在这里引入额外的js或者全局css</p><h4 id="静态资源引入方式介绍"><a href="#静态资源引入方式介绍" class="headerlink" title="静态资源引入方式介绍"></a>静态资源引入方式介绍</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"@/assets/js/index.js"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"@/assets/css/main.less"</span>;</span><br><span class="line"><span class="comment">//如果你的css文件是less或者其他问题，可以直接引入，webpack会自动帮你编译。当然前提是你在安装时的配置是否选择有当前的css预处理器。</span></span><br></pre></td></tr></table></figure><p>@符代表这src目录，而且我推荐你使用@符来书写路径，你甚至可以将上面的App.vue和router的路径都用@来表示。</p><h4 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h4><p>对，最开始接触vue-cli的时候我也有这个疑问，.vue文件到底是个什么东西。</p><p>它就是个组件。你可以抽象的把它认为是一个div，你可以随意的把它放到任意地方。当然放置的方式可能和div放置有点区别。比如App.vue这个组件，是在main.js里引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;Node 版本要求&lt;/p&gt;
&lt;p&gt;Vue CLI 需要 &lt;a href=&quot;https://nodejs.org/&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://hi-wendy.github.io/limedroid.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://hi-wendy.github.io/limedroid.github.io/tags/vue/"/>
    
      <category term="vue-cli" scheme="https://hi-wendy.github.io/limedroid.github.io/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>Git学习之putty密钥文件的生成</title>
    <link href="https://hi-wendy.github.io/limedroid.github.io//posts/19c65da8/"/>
    <id>https://hi-wendy.github.io/limedroid.github.io//posts/19c65da8/</id>
    <published>2019-09-17T06:59:19.240Z</published>
    <updated>2019-09-17T06:59:19.240Z</updated>
    
    <content type="html"><![CDATA[<h3 id="软件："><a href="#软件：" class="headerlink" title="软件："></a>软件：</h3><p><a href="http://tortoisegit.org/download/" target="_blank" rel="noopener">TortoiseGit</a>  or <a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">SourceTree</a> </p><h3 id="如何生成Putty的ppk文件："><a href="#如何生成Putty的ppk文件：" class="headerlink" title="如何生成Putty的ppk文件："></a>如何生成Putty的ppk文件：</h3><h4 id="在Git-Bash中输入命令"><a href="#在Git-Bash中输入命令" class="headerlink" title="在Git Bash中输入命令"></a>在Git Bash中输入命令</h4><p>生成 sshkey（记住生成的key的位置）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"xxx@xxx.com"</span></span><br><span class="line"><span class="comment"># Generating public/private rsa key pair...</span></span><br><span class="line"><span class="comment"># 三次回车即可生成 ssh key</span></span><br></pre></td></tr></table></figure><p>查看及添加key（以码云为例，码云SSH key添加地址:<a href="https://gitee.com/profile/sshkeys）" target="_blank" rel="noopener">https://gitee.com/profile/sshkeys）</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line"><span class="comment"># ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc....</span></span><br></pre></td></tr></table></figure><h4 id="PPK文件"><a href="#PPK文件" class="headerlink" title="PPK文件"></a>PPK文件</h4><p>下载putty程序或者puttygen单独程序<a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html" target="_blank" rel="noopener">下载地址</a></p><p>运行puttygen</p><p>点击Conversions菜单项中的Import key</p><p>选择刚才生成的sshkey的id_rsa文件</p><p>在puttygen的界面上点击Save private key按钮就可以把私钥转换为ppk的格式了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;软件：&quot;&gt;&lt;a href=&quot;#软件：&quot; class=&quot;headerlink&quot; title=&quot;软件：&quot;&gt;&lt;/a&gt;软件：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://tortoisegit.org/download/&quot; target=&quot;_blank&quot; rel=&quot;no
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://hi-wendy.github.io/limedroid.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="git" scheme="https://hi-wendy.github.io/limedroid.github.io/tags/git/"/>
    
  </entry>
  
</feed>
